Day-40 Summary


Access Modifiers: - > public, protected, default, private
                  - > variables, constructors, methods can have all 4 access modifiers.

    private members are accessible:
    	- only within the defining class

    default members are accessible:
    	- within the defining class
    	- in another class in the same package as the defining class

    protected members are accessible:
    	- within the defining class
    	- in another class in the same package as the defining class
    	- in the derived class defined in any package (through inheritance)
    	- It is used to make sure the class variables are accessible only to subclasses

    public members are accessible:
    	- within the defining class
    	- in another class in the same package as the defining class
    	- in a class defined in another package

Hiding Static Methods

	- We can not override static methods, we can hide them
	- The method in the child class must have the same signature as the method in the parent class
	- The method in the child class must be at least as accessible or more accessible than the method in the parent class
	- If the method returns a value, it must be the same or a subclass of the method in the parent class(covariant type)
	- The method defined in the child class must be marked as static if it is marked as static in the parent class(Method hiding)
	- The method must not be marked as static in the child class if it is not marked as static in the parent class(Method overriding)



public class Car{
	
	public static boolean isElectric(){
		return false;
	}

	public void getCarDetail(){
		System.out.println("Car is electric - " + isElectric());
	}

}

public class Honda extends Car{

	public static boolean isElectric(){
		return true;
	}

	public void getHondaDetail(){
		System.out.println("Honda is electric - " + isElectric());
	}
	
}


Honda honda = new Honda();
honda.getCarDetail();   - false
honda.getHondaDetail();  - true
















